name: Tests
# Run tests with code coverage
# See <https://doc.rust-lang.org/nightly/unstable-book/compiler-flags/instrument-coverage.html>

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  PROPTEST_CASES: 1000

jobs:

  test-rust:
    name: Test rust
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        rust-toolchain:
          # Tests require nightly
          # - stable
          # - beta
          - nightly
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo
            target/
          key: ${{ runner.os }}-${{ matrix.rust-toolchain }}-${{ hashFiles('**/Cargo.lock') }}-test-v1
      - name: Install Rust ${{ matrix.rust-toolchain }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust-toolchain }}
          components: llvm-tools-preview
          override: true
      - name: Install rustfilt and binutils
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: rustfilt cargo-binutils
      - name: Install postgres (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          choco install postgresql12 --force --params '/Password:root'
          echo "C:\Program Files\PostgreSQL\12\bin" >> $GITHUB_PATH
          echo "C:\Program Files\PostgreSQL\12\lib" >> $GITHUB_PATH
          echo "PQ_LIB_DIR=C:\Program Files\PostgreSQL\12\lib" >> $GITHUB_ENV
          echo "PG_DATABASE_URL=postgres://postgres:root@localhost/" >> $GITHUB_ENV
      - name: Build tests
        uses: actions-rs/cargo@v1
        env:
          RUSTFLAGS: -Zinstrument-coverage
        with:
          command: test
          args: --all-features --all-targets --no-run
      - name: Run tests
        uses: actions-rs/cargo@v1
        env:
          RUSTFLAGS: -Zinstrument-coverage
          LLVM_PROFILE_FILE: profile-%m.profraw
        with:
          command: test
          args: --all-features --all-targets --no-fail-fast
      - name: Creating coverage report
        if: ${{ runner.os != 'Windows' }}
        env:
          RUSTFLAGS: -Zinstrument-coverage
        run: |
          # Show files
          ls -lah
          # Merge execution traces
          cargo profdata -- merge -sparse $(find . -iname "profile-*.profraw") -o profile.profdata
          # Export to lcov format for codecov
          # NOTE: The inner cargo test command needs to be the same as above
          cargo cov -- export \
            --format=lcov > profile.lcov \
            --instr-profile=profile.profdata \
            $( \
              for file in \
                $( \
                  cargo test --all-features --all-targets --no-run --message-format=json \
                    | jq -r "select(.profile.test == true) | .filenames[]" \
                    | grep -v dSYM - \
                ); \
              do \
                printf "%s %s " -object $file; \
              done \
            )
      - name: Submit to codecov.io
        if: ${{ runner.os != 'Windows' }}
        uses: codecov/codecov-action@v2.0.3
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # Optional for public repos
          flags: test
          fail_ci_if_error: true
          verbose: true
